From ac1511ffa98defa6b6ec4778c24351afa694d919 Mon Sep 17 00:00:00 2001
From: Varphone Wong <varphone@qq.com>
Date: Sat, 4 Nov 2023 08:54:55 +0800
Subject: [PATCH] fix symbols exports with msvc

Signed-off-by: Varphone Wong <varphone@qq.com>
---
 PCLConfig.cmake.in                           |  4 ++++
 common/include/pcl/common/io.h               |  6 +++---
 common/include/pcl/pcl_exports.h             | 10 ++++++++--
 common/include/pcl/pcl_macros.h              |  8 ++++++--
 common/include/pcl/range_image/range_image.h | 18 +++++++++---------
 pcl_config.h.in                              |  1 +
 6 files changed, 31 insertions(+), 16 deletions(-)

diff --git a/PCLConfig.cmake.in b/PCLConfig.cmake.in
index d3fa589a6..ed3b9dccc 100644
--- a/PCLConfig.cmake.in
+++ b/PCLConfig.cmake.in
@@ -433,6 +433,10 @@ set(PCL_RELEASE_SUFFIX "@CMAKE_RELEASE_POSTFIX@")
 
 set(PCL_SHARED_LIBS "@PCL_SHARED_LIBS@")
 
+if(PCL_SHARED_LIBS)
+list(APPEND PCL_DEFINITIONS "-DPCL_SHARED_LIBS=1")
+endif()
+
 #set SSE flags used compiling PCL
 list(APPEND PCL_DEFINITIONS @PCLCONFIG_SSE_DEFINITIONS@)
 list(APPEND PCL_COMPILE_OPTIONS @PCLCONFIG_SSE_COMPILE_OPTIONS@)
diff --git a/common/include/pcl/common/io.h b/common/include/pcl/common/io.h
index f6e846e26..6925e1129 100644
--- a/common/include/pcl/common/io.h
+++ b/common/include/pcl/common/io.h
@@ -271,7 +271,7 @@ namespace pcl
     * \ingroup common
     */
   template <typename PointT>
-  PCL_EXPORTS bool
+  bool
   concatenate (const pcl::PointCloud<PointT> &cloud1,
                const pcl::PointCloud<PointT> &cloud2,
                pcl::PointCloud<PointT> &cloud_out)
@@ -289,7 +289,7 @@ namespace pcl
     * \return true if successful, false otherwise
     * \ingroup common
     */
-  PCL_EXPORTS inline bool
+  inline bool
   concatenate (const pcl::PCLPointCloud2 &cloud1,
                const pcl::PCLPointCloud2 &cloud2,
                pcl::PCLPointCloud2 &cloud_out)
@@ -304,7 +304,7 @@ namespace pcl
     * \return true if successful, false otherwise
     * \ingroup common
     */
-  PCL_EXPORTS inline bool
+  inline bool
   concatenate (const pcl::PolygonMesh &mesh1,
                const pcl::PolygonMesh &mesh2,
                pcl::PolygonMesh &mesh_out)
diff --git a/common/include/pcl/pcl_exports.h b/common/include/pcl/pcl_exports.h
index ef71bddad..c443ede56 100644
--- a/common/include/pcl/pcl_exports.h
+++ b/common/include/pcl/pcl_exports.h
@@ -38,9 +38,15 @@
 // Header 'pcl_macros' is not suitable since it includes <Eigen/Core>,
 // which can't be eaten by nvcc (it's too weak)
 
+#include <pcl/pcl_config.h>
+
 #if defined _WIN32 || defined WINCE || defined __MINGW32__
-    #ifdef PCLAPI_EXPORTS
-        #define PCL_EXPORTS __declspec(dllexport)
+    #ifdef PCL_SHARED_LIBS
+        #ifdef PCLAPI_EXPORTS
+            #define PCL_EXPORTS __declspec(dllexport)
+        #else
+            #define PCL_EXPORTS __declspec(dllimport)
+        #endif
     #else
         #define PCL_EXPORTS
     #endif
diff --git a/common/include/pcl/pcl_macros.h b/common/include/pcl/pcl_macros.h
index da487b5e1..cb4d06e79 100644
--- a/common/include/pcl/pcl_macros.h
+++ b/common/include/pcl/pcl_macros.h
@@ -317,8 +317,12 @@ pcl_round (float number)
 #endif
 
 #if defined WIN32 || defined _WIN32 || defined WINCE || defined __MINGW32__
-    #ifdef PCLAPI_EXPORTS
-        #define PCL_EXPORTS __declspec(dllexport)
+    #ifdef PCL_SHARED_LIBS
+        #ifdef PCLAPI_EXPORTS
+            #define PCL_EXPORTS __declspec(dllexport)
+        #else
+            #define PCL_EXPORTS __declspec(dllimport)
+        #endif
     #else
         #define PCL_EXPORTS
     #endif
diff --git a/common/include/pcl/range_image/range_image.h b/common/include/pcl/range_image/range_image.h
index 5cf84900c..0e5b1207c 100644
--- a/common/include/pcl/range_image/range_image.h
+++ b/common/include/pcl/range_image/range_image.h
@@ -274,7 +274,7 @@ namespace pcl
         * \param[in] angle_width an angle (in radians) defining the horizontal bounds of the sensor (defaults to 2*pi (360deg))
         * \param[in] angle_height an angle (in radians) defining the vertical bounds of the sensor (defaults to pi (180deg))
         */
-      void
+      PCL_EXPORTS void
       createEmpty (float angular_resolution, const Eigen::Affine3f& sensor_pose=Eigen::Affine3f::Identity (),
                    RangeImage::CoordinateFrame coordinate_frame=CAMERA_FRAME, float angle_width=pcl::deg2rad (360.0f),
                    float angle_height=pcl::deg2rad (180.0f));
@@ -289,7 +289,7 @@ namespace pcl
         * \param[in] angle_width an angle (in radians) defining the horizontal bounds of the sensor (defaults to 2*pi (360deg))
         * \param[in] angle_height an angle (in radians) defining the vertical bounds of the sensor (defaults to pi (180deg))
         */
-      void
+      PCL_EXPORTS void
       createEmpty (float angular_resolution_x, float angular_resolution_y,
                    const Eigen::Affine3f& sensor_pose=Eigen::Affine3f::Identity (),
                    RangeImage::CoordinateFrame coordinate_frame=CAMERA_FRAME, float angle_width=pcl::deg2rad (360.0f),
@@ -651,12 +651,12 @@ namespace pcl
         *                         is combine_pixels times the old one
         * \param sub_image - the output image
         */
-      virtual void
+      PCL_EXPORTS virtual void
       getSubImage (int sub_image_image_offset_x, int sub_image_image_offset_y, int sub_image_width,
                    int sub_image_height, int combine_pixels, RangeImage& sub_image) const;
 
       //! Get a range image with half the resolution
-      virtual void
+      PCL_EXPORTS virtual void
       getHalfImage (RangeImage& half_image) const;
 
       //! Find the minimum and maximum range in the image
@@ -782,12 +782,12 @@ namespace pcl
 
 
       // =====STATIC PROTECTED=====
-      static const int lookup_table_size;
-      static std::vector<float> asin_lookup_table;
-      static std::vector<float> atan_lookup_table;
-      static std::vector<float> cos_lookup_table;
+      PCL_EXPORTS static const int lookup_table_size;
+      PCL_EXPORTS static std::vector<float> asin_lookup_table;
+      PCL_EXPORTS static std::vector<float> atan_lookup_table;
+      PCL_EXPORTS static std::vector<float> cos_lookup_table;
       /** Create lookup tables for trigonometric functions */
-      static void
+      PCL_EXPORTS static void
       createLookupTables ();
 
       /** Query the asin lookup table */
diff --git a/pcl_config.h.in b/pcl_config.h.in
index b5ef2cbf9..4947fd922 100644
--- a/pcl_config.h.in
+++ b/pcl_config.h.in
@@ -87,3 +87,4 @@
 
 #cmakedefine HAVE_QVTK 1
 
+#cmakedefine PCL_SHARED_LIBS 1
-- 
2.42.0.windows.2

